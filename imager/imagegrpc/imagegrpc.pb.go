// Code generated by protoc-gen-go. DO NOT EDIT.
// source: imagegrpc.proto

/*
Package imagegrpc is a generated protocol buffer package.

It is generated from these files:
	imagegrpc.proto

It has these top-level messages:
	Image
	Images
	NewImageRequest
	NewImageResponse
	RemoveRequest
	RemoveResponse
	ImagesFilter
*/
package imagegrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Image struct {
	DocID    string `protobuf:"bytes,1,opt,name=docID" json:"docID,omitempty"`
	PhotoID  string `protobuf:"bytes,2,opt,name=photoID" json:"photoID,omitempty"`
	Original string `protobuf:"bytes,3,opt,name=original" json:"original,omitempty"`
	Thumb    string `protobuf:"bytes,4,opt,name=thumb" json:"thumb,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Image) GetDocID() string {
	if m != nil {
		return m.DocID
	}
	return ""
}

func (m *Image) GetPhotoID() string {
	if m != nil {
		return m.PhotoID
	}
	return ""
}

func (m *Image) GetOriginal() string {
	if m != nil {
		return m.Original
	}
	return ""
}

func (m *Image) GetThumb() string {
	if m != nil {
		return m.Thumb
	}
	return ""
}

type Images struct {
	Images []*Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *Images) Reset()                    { *m = Images{} }
func (m *Images) String() string            { return proto.CompactTextString(m) }
func (*Images) ProtoMessage()               {}
func (*Images) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Images) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type NewImageRequest struct {
	DocID    string `protobuf:"bytes,1,opt,name=docID" json:"docID,omitempty"`
	PhotoID  string `protobuf:"bytes,2,opt,name=photoID" json:"photoID,omitempty"`
	Original string `protobuf:"bytes,3,opt,name=original" json:"original,omitempty"`
	Thumb    string `protobuf:"bytes,4,opt,name=thumb" json:"thumb,omitempty"`
}

func (m *NewImageRequest) Reset()                    { *m = NewImageRequest{} }
func (m *NewImageRequest) String() string            { return proto.CompactTextString(m) }
func (*NewImageRequest) ProtoMessage()               {}
func (*NewImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NewImageRequest) GetDocID() string {
	if m != nil {
		return m.DocID
	}
	return ""
}

func (m *NewImageRequest) GetPhotoID() string {
	if m != nil {
		return m.PhotoID
	}
	return ""
}

func (m *NewImageRequest) GetOriginal() string {
	if m != nil {
		return m.Original
	}
	return ""
}

func (m *NewImageRequest) GetThumb() string {
	if m != nil {
		return m.Thumb
	}
	return ""
}

type NewImageResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *NewImageResponse) Reset()                    { *m = NewImageResponse{} }
func (m *NewImageResponse) String() string            { return proto.CompactTextString(m) }
func (*NewImageResponse) ProtoMessage()               {}
func (*NewImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewImageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RemoveRequest struct {
	ColID   string `protobuf:"bytes,1,opt,name=colID" json:"colID,omitempty"`
	ImageID string `protobuf:"bytes,2,opt,name=imageID" json:"imageID,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RemoveRequest) GetColID() string {
	if m != nil {
		return m.ColID
	}
	return ""
}

func (m *RemoveRequest) GetImageID() string {
	if m != nil {
		return m.ImageID
	}
	return ""
}

type RemoveResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RemoveResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ImagesFilter struct {
	ColID string `protobuf:"bytes,1,opt,name=colID" json:"colID,omitempty"`
}

func (m *ImagesFilter) Reset()                    { *m = ImagesFilter{} }
func (m *ImagesFilter) String() string            { return proto.CompactTextString(m) }
func (*ImagesFilter) ProtoMessage()               {}
func (*ImagesFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ImagesFilter) GetColID() string {
	if m != nil {
		return m.ColID
	}
	return ""
}

func init() {
	proto.RegisterType((*Image)(nil), "imagegrpc.Image")
	proto.RegisterType((*Images)(nil), "imagegrpc.Images")
	proto.RegisterType((*NewImageRequest)(nil), "imagegrpc.NewImageRequest")
	proto.RegisterType((*NewImageResponse)(nil), "imagegrpc.NewImageResponse")
	proto.RegisterType((*RemoveRequest)(nil), "imagegrpc.RemoveRequest")
	proto.RegisterType((*RemoveResponse)(nil), "imagegrpc.RemoveResponse")
	proto.RegisterType((*ImagesFilter)(nil), "imagegrpc.ImagesFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Imager service

type ImagerClient interface {
	// Get all Customers with filter - A server-to-client streaming RPC.
	GetImages(ctx context.Context, in *ImagesFilter, opts ...grpc.CallOption) (Imager_GetImagesClient, error)
	// Create a new Customer - A simple RPC
	DeleteImage(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	AddImage(ctx context.Context, in *NewImageRequest, opts ...grpc.CallOption) (*NewImageResponse, error)
}

type imagerClient struct {
	cc *grpc.ClientConn
}

func NewImagerClient(cc *grpc.ClientConn) ImagerClient {
	return &imagerClient{cc}
}

func (c *imagerClient) GetImages(ctx context.Context, in *ImagesFilter, opts ...grpc.CallOption) (Imager_GetImagesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Imager_serviceDesc.Streams[0], c.cc, "/imagegrpc.Imager/GetImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagerGetImagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Imager_GetImagesClient interface {
	Recv() (*Images, error)
	grpc.ClientStream
}

type imagerGetImagesClient struct {
	grpc.ClientStream
}

func (x *imagerGetImagesClient) Recv() (*Images, error) {
	m := new(Images)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagerClient) DeleteImage(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := grpc.Invoke(ctx, "/imagegrpc.Imager/DeleteImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagerClient) AddImage(ctx context.Context, in *NewImageRequest, opts ...grpc.CallOption) (*NewImageResponse, error) {
	out := new(NewImageResponse)
	err := grpc.Invoke(ctx, "/imagegrpc.Imager/AddImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Imager service

type ImagerServer interface {
	// Get all Customers with filter - A server-to-client streaming RPC.
	GetImages(*ImagesFilter, Imager_GetImagesServer) error
	// Create a new Customer - A simple RPC
	DeleteImage(context.Context, *RemoveRequest) (*RemoveResponse, error)
	AddImage(context.Context, *NewImageRequest) (*NewImageResponse, error)
}

func RegisterImagerServer(s *grpc.Server, srv ImagerServer) {
	s.RegisterService(&_Imager_serviceDesc, srv)
}

func _Imager_GetImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagesFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagerServer).GetImages(m, &imagerGetImagesServer{stream})
}

type Imager_GetImagesServer interface {
	Send(*Images) error
	grpc.ServerStream
}

type imagerGetImagesServer struct {
	grpc.ServerStream
}

func (x *imagerGetImagesServer) Send(m *Images) error {
	return x.ServerStream.SendMsg(m)
}

func _Imager_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagerServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagegrpc.Imager/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagerServer).DeleteImage(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imager_AddImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagerServer).AddImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagegrpc.Imager/AddImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagerServer).AddImage(ctx, req.(*NewImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Imager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imagegrpc.Imager",
	HandlerType: (*ImagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteImage",
			Handler:    _Imager_DeleteImage_Handler,
		},
		{
			MethodName: "AddImage",
			Handler:    _Imager_AddImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImages",
			Handler:       _Imager_GetImages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imagegrpc.proto",
}

func init() { proto.RegisterFile("imagegrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0xc1, 0x4e, 0x83, 0x40,
	0x14, 0x2c, 0xd6, 0x22, 0xbc, 0xaa, 0xad, 0x1b, 0x13, 0x57, 0xbc, 0x34, 0x1b, 0x0f, 0xc4, 0x98,
	0xc6, 0xe0, 0xd1, 0x83, 0x31, 0x41, 0x0d, 0x17, 0x0f, 0xfc, 0x41, 0x0b, 0x2f, 0x94, 0x04, 0xba,
	0xc8, 0x2e, 0xfa, 0x9f, 0x7e, 0x91, 0x61, 0x17, 0x0a, 0x56, 0x12, 0x6f, 0x1e, 0xe7, 0xcd, 0xcb,
	0xcc, 0xbc, 0xd9, 0x85, 0x59, 0x9a, 0xaf, 0x12, 0x4c, 0xca, 0x22, 0x5a, 0x16, 0x25, 0x97, 0x9c,
	0xd8, 0xbb, 0x01, 0x4b, 0x61, 0x12, 0xd4, 0x80, 0x9c, 0xc3, 0x24, 0xe6, 0x51, 0xe0, 0x53, 0x63,
	0x61, 0xb8, 0x76, 0xa8, 0x01, 0xa1, 0x70, 0x54, 0x6c, 0xb8, 0xe4, 0x81, 0x4f, 0x0f, 0xd4, 0xbc,
	0x85, 0xc4, 0x01, 0x8b, 0x97, 0x69, 0x92, 0x6e, 0x57, 0x19, 0x1d, 0x2b, 0x6a, 0x87, 0x6b, 0x2d,
	0xb9, 0xa9, 0xf2, 0x35, 0x3d, 0xd4, 0x5a, 0x0a, 0x30, 0x0f, 0x4c, 0x65, 0x25, 0x88, 0x0b, 0xa6,
	0x4a, 0x20, 0xa8, 0xb1, 0x18, 0xbb, 0x53, 0x6f, 0xbe, 0xec, 0x12, 0xaa, 0x95, 0xb0, 0xe1, 0x99,
	0x80, 0xd9, 0x1b, 0x7e, 0xea, 0x19, 0xbe, 0x57, 0x28, 0xe4, 0x3f, 0x04, 0xbd, 0x85, 0x79, 0x67,
	0x2a, 0x0a, 0xbe, 0x15, 0x58, 0xeb, 0x8b, 0x2a, 0x8a, 0x50, 0x08, 0xe5, 0x6b, 0x85, 0x2d, 0x64,
	0x8f, 0x70, 0x12, 0x62, 0xce, 0x3f, 0xfa, 0x01, 0x23, 0x9e, 0x75, 0x01, 0x15, 0xa8, 0x05, 0xd4,
	0x4d, 0x5d, 0xc0, 0x06, 0xb2, 0x1b, 0x38, 0x6d, 0x05, 0xfe, 0x34, 0xbb, 0x86, 0x63, 0xdd, 0xe1,
	0x4b, 0x9a, 0x49, 0x2c, 0x87, 0xbd, 0xbc, 0x2f, 0xa3, 0xa9, 0xba, 0x24, 0x0f, 0x60, 0xbf, 0xa2,
	0x6c, 0x7a, 0xbf, 0xd8, 0xef, 0xb9, 0x91, 0x71, 0xce, 0x7e, 0x11, 0x6c, 0x74, 0x67, 0x10, 0x1f,
	0xa6, 0x3e, 0x66, 0x28, 0x51, 0x7f, 0x11, 0xda, 0xdb, 0xfa, 0x71, 0xb2, 0x73, 0x39, 0xc0, 0xe8,
	0x5b, 0xd8, 0x88, 0x3c, 0x83, 0xf5, 0x14, 0xc7, 0x5a, 0xc2, 0xe9, 0x2d, 0xee, 0x3d, 0xac, 0x73,
	0x35, 0xc8, 0xb5, 0x32, 0x6b, 0x53, 0xfd, 0xdd, 0xfb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41,
	0x54, 0xdc, 0x3c, 0xce, 0x02, 0x00, 0x00,
}
